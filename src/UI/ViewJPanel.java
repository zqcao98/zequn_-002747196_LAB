/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Application;
import Model.Observation;
import Model.VitalSignHistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zequncao
 */
public class ViewJPanel extends javax.swing.JPanel {

    private Application application;
    DefaultTableModel viewtableModel;
    Observation selectedObservation;

    /**
     * Creates new form ViewJPanel
     */
    public ViewJPanel() {
        initComponents();
    }

    ViewJPanel(Application application) {
        initComponents();
        
        this.application = application;
        this.viewtableModel = (DefaultTableModel) observationTable.getModel();
        // display the vital sign observations
        displayObservation();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fieldObservationID = new javax.swing.JTextField();
        fieldTemperature1 = new javax.swing.JTextField();
        fieldBloodPressure = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationTable = new javax.swing.JTable();
        viewObservation = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("VIEW AND UPDATE A VITAL SIGN");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 240, 40));

        fieldObservationID.setEnabled(false);
        add(fieldObservationID, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 110, 30));
        add(fieldTemperature1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 110, 30));
        add(fieldBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, 110, 30));

        jLabel2.setText("ID");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, -1, -1));

        jLabel3.setText("Temperature");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, -1, -1));

        jLabel4.setText("Blood Pressure");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));

        update.setText("update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, -1, -1));

        observationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Temperature", "BloodPressure"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(observationTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 60, 260, 330));

        viewObservation.setText("VIEW DETIALS");
        viewObservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewObservationActionPerformed(evt);
            }
        });
        add(viewObservation, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 400, -1, -1));
    }// </editor-fold>//GEN-END:initComponents
//    Observation o = this.application.getHistory();
//    this.selectedObservation.setBloodPressure(Doubel.valueOf(fieldBloodPressure.getText()));
//    this.selectedObservation.setTemperature(Doubel.valueOf(fieldTemperature.getText()));
    private void viewObservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewObservationActionPerformed
        // TODO add your handling code here:
        
        // what was cliked? Get the row in the table that was cliked
        
        int selectedRow = observationTable.getSelectedRow();
        
        if(selectedRow >= 0) {
            // We can directly fetch the Observation object from the Zeroth position
            Observation observation = (Observation) observationTable.getValueAt(selectedRow, 0);
            
            // fill all the text fields
            fieldObservationID.setText(String.valueOf(observation.getObservationId()));
            fieldBloodPressure.setText(String.valueOf(observation.getBloodPressure()));
            fieldTemperature1.setText(String.valueOf(observation.getTemperature()));
            
        } else {
            // no selection made by the user
            
            JOptionPane.showMessageDialog(null,"Please select a row!");
        }
    }//GEN-LAST:event_viewObservationActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        if (!fieldObservationID.getText().isEmpty()) {
            Observation o = this.application.getHistory().findObservation(Integer.valueOf(fieldObservationID.getText()));
            o.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
            o.setTemperature(Double.valueOf(fieldTemperature1.getText()));
        } else {
            JOptionPane.showMessageDialog(null, "You have not made any selections");
        }

        displayObservation();
//    this.selectedObservation.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
//    this.selectedObservation.setTemperature(Double.valueOf(fieldTemperature1.getText()));
    }//GEN-LAST:event_updateActionPerformed
    public void displayObservation() {
        VitalSignHistory history = this.application.getHistory();
        
        if(history.getVitalSignHistory().size() > 0 ) {
            //display
            
            viewtableModel.setRowCount(0);
            for(Observation o: history.getVitalSignHistory()) {
                // number of column in the table = 3 and row should be framed
                
                Object row[] = new Object[3];
                row[0] = o;
                row[1] = o.getTemperature();
                row[2] = o.getBloodPressure();
                
                // add the row to the table
                viewtableModel.addRow(row);
                
            }
            
        } else {
                System.out.print("Empty list");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldBloodPressure;
    private javax.swing.JTextField fieldObservationID;
    private javax.swing.JTextField fieldTemperature1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable observationTable;
    private javax.swing.JButton update;
    private javax.swing.JButton viewObservation;
    // End of variables declaration//GEN-END:variables
}
